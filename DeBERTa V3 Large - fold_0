{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "d6b34868",
   "metadata": {
    "_kg_hide-input": false,
    "execution": {
     "iopub.execute_input": "2022-07-23T11:32:54.972180Z",
     "iopub.status.busy": "2022-07-23T11:32:54.971830Z",
     "iopub.status.idle": "2022-07-23T11:33:03.553221Z",
     "shell.execute_reply": "2022-07-23T11:33:03.552361Z"
    },
    "papermill": {
     "duration": 8.661757,
     "end_time": "2022-07-23T11:33:03.555527",
     "exception": false,
     "start_time": "2022-07-23T11:32:54.893770",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import os\n",
    "\n",
    "run_type = os.environ.get('KAGGLE_KERNEL_RUN_TYPE', '')\n",
    "\n",
    "import logging\n",
    "from types import SimpleNamespace\n",
    "from pathlib import Path\n",
    "from datetime import datetime\n",
    "import math\n",
    "\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import seaborn as sns\n",
    "from sklearn.model_selection import StratifiedKFold\n",
    "from sklearn.metrics import log_loss\n",
    "from torch.utils.data import DataLoader, Dataset\n",
    "from transformers import AutoModelForSequenceClassification, AutoTokenizer, AutoConfig\n",
    "from transformers import TrainingArguments, Trainer\n",
    "from tqdm import tqdm\n",
    "from scipy.special import softmax\n",
    "from IPython.core.display import display, HTML\n",
    "\n",
    "from transformers import DataCollatorWithPadding\n",
    "from datasets import Dataset, load_metric\n",
    "\n",
    "import wandb\n",
    "\n",
    "# From this Gist: https://gist.github.com/ihoromi4/b681a9088f348942b01711f251e5f964\n",
    "def seed_everything(seed: int):\n",
    "    import random, os\n",
    "    import numpy as np\n",
    "    import torch\n",
    "    \n",
    "    random.seed(seed)\n",
    "    os.environ['PYTHONHASHSEED'] = str(seed)\n",
    "    np.random.seed(seed)\n",
    "    torch.manual_seed(seed)\n",
    "    torch.cuda.manual_seed(seed)\n",
    "    torch.backends.cudnn.deterministic = True\n",
    "    torch.backends.cudnn.benchmark = True"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "517d9a4b",
   "metadata": {
    "papermill": {
     "duration": 0.072957,
     "end_time": "2022-07-23T11:33:03.702333",
     "exception": false,
     "start_time": "2022-07-23T11:33:03.629376",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Load Data\n",
    "\n",
    "The competition data includes a training CSV file which includes metadata for each essay element, and a folder containing the full essay texts.\n",
    "\n",
    "Let's start by loading these and looking at an example from the train and test set."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "c39c22a8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-23T11:33:03.852011Z",
     "iopub.status.busy": "2022-07-23T11:33:03.851043Z",
     "iopub.status.idle": "2022-07-23T11:33:04.134259Z",
     "shell.execute_reply": "2022-07-23T11:33:04.133444Z"
    },
    "papermill": {
     "duration": 0.359961,
     "end_time": "2022-07-23T11:33:04.136348",
     "exception": false,
     "start_time": "2022-07-23T11:33:03.776387",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train_df = pd.read_csv('../input/feedback-prize-effectiveness/train.csv')\n",
    "test_df = pd.read_csv('../input/feedback-prize-effectiveness/test.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "92e3b65e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-23T11:33:04.284922Z",
     "iopub.status.busy": "2022-07-23T11:33:04.284707Z",
     "iopub.status.idle": "2022-07-23T11:33:04.300976Z",
     "shell.execute_reply": "2022-07-23T11:33:04.300347Z"
    },
    "papermill": {
     "duration": 0.092705,
     "end_time": "2022-07-23T11:33:04.303028",
     "exception": false,
     "start_time": "2022-07-23T11:33:04.210323",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>discourse_id</th>\n",
       "      <th>essay_id</th>\n",
       "      <th>discourse_text</th>\n",
       "      <th>discourse_type</th>\n",
       "      <th>discourse_effectiveness</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0013cc385424</td>\n",
       "      <td>007ACE74B050</td>\n",
       "      <td>Hi, i'm Isaac, i'm going to be writing about h...</td>\n",
       "      <td>Lead</td>\n",
       "      <td>Adequate</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   discourse_id      essay_id  \\\n",
       "0  0013cc385424  007ACE74B050   \n",
       "\n",
       "                                      discourse_text discourse_type  \\\n",
       "0  Hi, i'm Isaac, i'm going to be writing about h...           Lead   \n",
       "\n",
       "  discourse_effectiveness  \n",
       "0                Adequate  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_df.head(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "164d32a0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-23T11:33:04.452278Z",
     "iopub.status.busy": "2022-07-23T11:33:04.451794Z",
     "iopub.status.idle": "2022-07-23T11:33:04.464452Z",
     "shell.execute_reply": "2022-07-23T11:33:04.463807Z"
    },
    "papermill": {
     "duration": 0.089483,
     "end_time": "2022-07-23T11:33:04.466090",
     "exception": false,
     "start_time": "2022-07-23T11:33:04.376607",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>discourse_id</th>\n",
       "      <th>essay_id</th>\n",
       "      <th>discourse_text</th>\n",
       "      <th>discourse_type</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>a261b6e14276</td>\n",
       "      <td>D72CB1C11673</td>\n",
       "      <td>Making choices in life can be very difficult. ...</td>\n",
       "      <td>Lead</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   discourse_id      essay_id  \\\n",
       "0  a261b6e14276  D72CB1C11673   \n",
       "\n",
       "                                      discourse_text discourse_type  \n",
       "0  Making choices in life can be very difficult. ...           Lead  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_df.head(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "ff6b5824",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-23T11:33:04.615396Z",
     "iopub.status.busy": "2022-07-23T11:33:04.615196Z",
     "iopub.status.idle": "2022-07-23T11:33:04.619557Z",
     "shell.execute_reply": "2022-07-23T11:33:04.618918Z"
    },
    "papermill": {
     "duration": 0.081076,
     "end_time": "2022-07-23T11:33:04.621166",
     "exception": false,
     "start_time": "2022-07-23T11:33:04.540090",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(36765, 10)"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(train_df), len(test_df)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d7a254ee",
   "metadata": {
    "papermill": {
     "duration": 0.074726,
     "end_time": "2022-07-23T11:33:04.770792",
     "exception": false,
     "start_time": "2022-07-23T11:33:04.696066",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "The train set contains **36,756** essay elements.\n",
    "\n",
    "The test set CSV only contains **10** elements, as the notebook needs to be submitted to run against the entire test set."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2ae6b26d",
   "metadata": {
    "papermill": {
     "duration": 0.075796,
     "end_time": "2022-07-23T11:33:04.921721",
     "exception": false,
     "start_time": "2022-07-23T11:33:04.845925",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Essay Texts"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4ceb2a34",
   "metadata": {
    "papermill": {
     "duration": 0.077726,
     "end_time": "2022-07-23T11:33:05.073610",
     "exception": false,
     "start_time": "2022-07-23T11:33:04.995884",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Let's see the first 200 characters of a few essay examples."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "ca859f00",
   "metadata": {
    "_kg_hide-input": true,
    "execution": {
     "iopub.execute_input": "2022-07-23T11:33:05.225114Z",
     "iopub.status.busy": "2022-07-23T11:33:05.224864Z",
     "iopub.status.idle": "2022-07-23T11:33:05.268112Z",
     "shell.execute_reply": "2022-07-23T11:33:05.267489Z"
    },
    "papermill": {
     "duration": 0.121429,
     "end_time": "2022-07-23T11:33:05.269735",
     "exception": false,
     "start_time": "2022-07-23T11:33:05.148306",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "essays = train_df.essay_id.unique()\n",
    "\n",
    "texts = []\n",
    "for essay_id in essays[:10]:\n",
    "    texts.append(open(f'../input/feedback-prize-effectiveness/train/{essay_id}.txt').read())\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "89c20e52",
   "metadata": {
    "papermill": {
     "duration": 0.074351,
     "end_time": "2022-07-23T11:33:05.418916",
     "exception": false,
     "start_time": "2022-07-23T11:33:05.344565",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Let's count the number of unique essays in the folder."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "518436e2",
   "metadata": {
    "_kg_hide-input": true,
    "execution": {
     "iopub.execute_input": "2022-07-23T11:33:05.568897Z",
     "iopub.status.busy": "2022-07-23T11:33:05.568643Z",
     "iopub.status.idle": "2022-07-23T11:33:05.685179Z",
     "shell.execute_reply": "2022-07-23T11:33:05.684448Z"
    },
    "papermill": {
     "duration": 0.193285,
     "end_time": "2022-07-23T11:33:05.686926",
     "exception": false,
     "start_time": "2022-07-23T11:33:05.493641",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4191"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from pathlib import Path\n",
    "\n",
    "essay_ids_in_folder = set()\n",
    "for path in Path('../input/feedback-prize-effectiveness/train').iterdir():\n",
    "    essay_ids_in_folder.add(path.name[:-4])\n",
    "len(essay_ids_in_folder)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "da7d5ba4",
   "metadata": {
    "papermill": {
     "duration": 0.075465,
     "end_time": "2022-07-23T11:33:05.837372",
     "exception": false,
     "start_time": "2022-07-23T11:33:05.761907",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "There are **4,191** unique essays. Not a huge dataset at all!"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9a38d510",
   "metadata": {
    "papermill": {
     "duration": 0.074631,
     "end_time": "2022-07-23T11:33:05.989162",
     "exception": false,
     "start_time": "2022-07-23T11:33:05.914531",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Compared with number of essays in the CSV?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "12d37286",
   "metadata": {
    "_kg_hide-input": true,
    "_kg_hide-output": true,
    "execution": {
     "iopub.execute_input": "2022-07-23T11:33:06.220465Z",
     "iopub.status.busy": "2022-07-23T11:33:06.220162Z",
     "iopub.status.idle": "2022-07-23T11:33:06.239390Z",
     "shell.execute_reply": "2022-07-23T11:33:06.238565Z"
    },
    "papermill": {
     "duration": 0.176471,
     "end_time": "2022-07-23T11:33:06.242924",
     "exception": false,
     "start_time": "2022-07-23T11:33:06.066453",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4191"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_df.essay_id.nunique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "5f282fd5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-23T11:33:06.510396Z",
     "iopub.status.busy": "2022-07-23T11:33:06.510131Z",
     "iopub.status.idle": "2022-07-23T11:33:06.528650Z",
     "shell.execute_reply": "2022-07-23T11:33:06.528021Z"
    },
    "papermill": {
     "duration": 0.143213,
     "end_time": "2022-07-23T11:33:06.530878",
     "exception": false,
     "start_time": "2022-07-23T11:33:06.387665",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(set(), set())"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "essay_ids_in_folder - set(train_df.essay_id.unique()), set(train_df.essay_id.unique()) - essay_ids_in_folder"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "affb553c",
   "metadata": {
    "papermill": {
     "duration": 0.083685,
     "end_time": "2022-07-23T11:33:06.733786",
     "exception": false,
     "start_time": "2022-07-23T11:33:06.650101",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "So every essay in the CSV is represented in the folder. At least for the train set."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "91bf1da2",
   "metadata": {
    "papermill": {
     "duration": 0.076103,
     "end_time": "2022-07-23T11:33:06.889756",
     "exception": false,
     "start_time": "2022-07-23T11:33:06.813653",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Topics/Prompts\n",
    "\n",
    "[@jdoesv](https://www.kaggle.com/jdoesv) put together a really useful [notebook](https://www.kaggle.com/code/jdoesv/topics-identification), which runs [BERTopic](https://maartengr.github.io/BERTopic/index.html) across each of the training examples. This uncovers the essay prompts used for each of the training examples.\n",
    "\n",
    "jdoesv determines that there are [15 essay prompts used in the dataset](https://www.kaggle.com/competitions/feedback-prize-effectiveness/discussion/327514). The topic information is useful for data analysis, and will potentially be useful in the final model, so I'm joining it with the competition dataset."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "a96e9ac9",
   "metadata": {
    "_kg_hide-input": true,
    "execution": {
     "iopub.execute_input": "2022-07-23T11:33:07.042803Z",
     "iopub.status.busy": "2022-07-23T11:33:07.042502Z",
     "iopub.status.idle": "2022-07-23T11:33:07.100947Z",
     "shell.execute_reply": "2022-07-23T11:33:07.100287Z"
    },
    "papermill": {
     "duration": 0.137364,
     "end_time": "2022-07-23T11:33:07.102945",
     "exception": false,
     "start_time": "2022-07-23T11:33:06.965581",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "topic_pred_df = pd.read_csv('../input/feedback-topics-identification-with-bertopic/topic_model_feedback.csv')\n",
    "topic_pred_df = topic_pred_df.drop(columns={'prob'})\n",
    "topic_pred_df = topic_pred_df.rename(columns={'id': 'essay_id'})\n",
    "\n",
    "topic_meta_df = pd.read_csv('../input/feedback-topics-identification-with-bertopic/topic_model_metadata.csv')\n",
    "topic_meta_df = topic_meta_df.rename(columns={'Topic': 'topic', 'Name': 'topic_name'}).drop(columns=['Count'])\n",
    "topic_meta_df.topic_name = topic_meta_df.topic_name.apply(lambda n: ' '.join(n.split('_')[1:]))\n",
    "\n",
    "topic_pred_df = topic_pred_df.merge(topic_meta_df, on='topic', how='left')\n",
    "\n",
    "train_df = train_df.merge(topic_pred_df, on='essay_id', how='left')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "9ac727ce",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-23T11:33:07.256806Z",
     "iopub.status.busy": "2022-07-23T11:33:07.256592Z",
     "iopub.status.idle": "2022-07-23T11:33:07.260176Z",
     "shell.execute_reply": "2022-07-23T11:33:07.259394Z"
    },
    "papermill": {
     "duration": 0.080965,
     "end_time": "2022-07-23T11:33:07.262176",
     "exception": false,
     "start_time": "2022-07-23T11:33:07.181211",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "labels = ['Adequate', 'Effective', 'Ineffective']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "8d5d3e6f",
   "metadata": {
    "_kg_hide-input": true,
    "execution": {
     "iopub.execute_input": "2022-07-23T11:33:07.412873Z",
     "iopub.status.busy": "2022-07-23T11:33:07.412680Z",
     "iopub.status.idle": "2022-07-23T11:33:07.419507Z",
     "shell.execute_reply": "2022-07-23T11:33:07.418897Z"
    },
    "papermill": {
     "duration": 0.083692,
     "end_time": "2022-07-23T11:33:07.421107",
     "exception": false,
     "start_time": "2022-07-23T11:33:07.337415",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "discourse_types = train_df.discourse_type.unique()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1fbf4e6c",
   "metadata": {
    "papermill": {
     "duration": 0.077415,
     "end_time": "2022-07-23T11:33:07.575557",
     "exception": false,
     "start_time": "2022-07-23T11:33:07.498142",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "It seems that you have highest probability of having your section marked `Ineffective` within the `Evidence` Discourse Type.\n",
    "\n",
    "That makes sense as the degree of Evidence seems more objectively quantifiable."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "63df1c97",
   "metadata": {
    "papermill": {
     "duration": 0.090999,
     "end_time": "2022-07-23T11:33:07.744416",
     "exception": false,
     "start_time": "2022-07-23T11:33:07.653417",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Discourse Effectiveness (label)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "57ef45a3",
   "metadata": {
    "papermill": {
     "duration": 0.075498,
     "end_time": "2022-07-23T11:33:07.895360",
     "exception": false,
     "start_time": "2022-07-23T11:33:07.819862",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Each essay section is labelled from one of three labels: `Adequate`, `Effective`, and `Ineffective`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "b716dc5c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-23T11:33:08.049478Z",
     "iopub.status.busy": "2022-07-23T11:33:08.049217Z",
     "iopub.status.idle": "2022-07-23T11:33:08.054427Z",
     "shell.execute_reply": "2022-07-23T11:33:08.053675Z"
    },
    "papermill": {
     "duration": 0.084054,
     "end_time": "2022-07-23T11:33:08.056117",
     "exception": false,
     "start_time": "2022-07-23T11:33:07.972063",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Adequate', 'Effective', 'Ineffective']"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "labels"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "569c10ad",
   "metadata": {
    "papermill": {
     "duration": 0.077347,
     "end_time": "2022-07-23T11:33:08.210792",
     "exception": false,
     "start_time": "2022-07-23T11:33:08.133445",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Let's explore the distribution."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "626e7213",
   "metadata": {
    "papermill": {
     "duration": 0.074889,
     "end_time": "2022-07-23T11:33:08.361640",
     "exception": false,
     "start_time": "2022-07-23T11:33:08.286751",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "As we can see, quite an imbalanced dataset. We may want to use some kind of weighting, or perhaps up or downsampling within the solution."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "75271b1d",
   "metadata": {
    "papermill": {
     "duration": 0.076239,
     "end_time": "2022-07-23T11:33:08.518552",
     "exception": false,
     "start_time": "2022-07-23T11:33:08.442313",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Let's see examples of each for each discourse type from topic: `face mars landform aliens`"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ed8bdcfc",
   "metadata": {
    "papermill": {
     "duration": 0.074606,
     "end_time": "2022-07-23T11:33:08.668085",
     "exception": false,
     "start_time": "2022-07-23T11:33:08.593479",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "The mean word count is 44.65 words:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "970db2b0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-23T11:33:08.823211Z",
     "iopub.status.busy": "2022-07-23T11:33:08.822972Z",
     "iopub.status.idle": "2022-07-23T11:33:08.946744Z",
     "shell.execute_reply": "2022-07-23T11:33:08.946033Z"
    },
    "papermill": {
     "duration": 0.202824,
     "end_time": "2022-07-23T11:33:08.948457",
     "exception": false,
     "start_time": "2022-07-23T11:33:08.745633",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train_df['word_count'] = train_df.discourse_text.apply(lambda x: len(x.split()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "7f91f971",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-23T11:33:09.102593Z",
     "iopub.status.busy": "2022-07-23T11:33:09.102323Z",
     "iopub.status.idle": "2022-07-23T11:33:09.108421Z",
     "shell.execute_reply": "2022-07-23T11:33:09.107697Z"
    },
    "papermill": {
     "duration": 0.084813,
     "end_time": "2022-07-23T11:33:09.110108",
     "exception": false,
     "start_time": "2022-07-23T11:33:09.025295",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "44.65407316741466"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_df['word_count'].mean()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7053c788",
   "metadata": {
    "papermill": {
     "duration": 0.076189,
     "end_time": "2022-07-23T11:33:09.263047",
     "exception": false,
     "start_time": "2022-07-23T11:33:09.186858",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "The max word count is 836."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "42fabe9c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-23T11:33:09.420109Z",
     "iopub.status.busy": "2022-07-23T11:33:09.419860Z",
     "iopub.status.idle": "2022-07-23T11:33:09.426048Z",
     "shell.execute_reply": "2022-07-23T11:33:09.425318Z"
    },
    "papermill": {
     "duration": 0.088199,
     "end_time": "2022-07-23T11:33:09.427699",
     "exception": false,
     "start_time": "2022-07-23T11:33:09.339500",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "836"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_df['word_count'].max()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8af1d328",
   "metadata": {
    "papermill": {
     "duration": 0.079202,
     "end_time": "2022-07-23T11:33:09.583884",
     "exception": false,
     "start_time": "2022-07-23T11:33:09.504682",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Let's see the first 1000 characters:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "ec1bd54d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-23T11:33:09.740010Z",
     "iopub.status.busy": "2022-07-23T11:33:09.739763Z",
     "iopub.status.idle": "2022-07-23T11:33:09.746243Z",
     "shell.execute_reply": "2022-07-23T11:33:09.745581Z"
    },
    "papermill": {
     "duration": 0.086616,
     "end_time": "2022-07-23T11:33:09.747837",
     "exception": false,
     "start_time": "2022-07-23T11:33:09.661221",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "\"You can search the website up so that you can finished it the assignment to handle it in to your teacher if you missing anything from your others class you can finished with your others class you have with your schdule. If you stuck on the question go asked your teacher to helped you out now go to any comptuer that you wanted to be in you have to sign in thorugh your computer to logn in now you hace to wait unitl the screen show up and now go to the website that is on your paper to finished on your assignment on your homework.\\n\\nFirst now go to any comptuer that you wanted to be in you have to sign in thorugh your computer to logn in now you hace to wait unitl the screen is done. Now listen to your teachers to follow the dirction how to go in the website. If you didn't finished the assignment that you can finished it at home. When you take your worksheet home you have to bring it back if you didn't finished it your assignment it be came homework. Now the teacher said now sign off the co\""
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_df.iloc[train_df['word_count'].idxmax()].discourse_text[:1000]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6fea2070",
   "metadata": {
    "papermill": {
     "duration": 0.076573,
     "end_time": "2022-07-23T11:33:09.901021",
     "exception": false,
     "start_time": "2022-07-23T11:33:09.824448",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Let's see the word count per Discourse Type"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "31a303ec",
   "metadata": {
    "_kg_hide-input": true,
    "execution": {
     "iopub.execute_input": "2022-07-23T11:33:10.058950Z",
     "iopub.status.busy": "2022-07-23T11:33:10.058399Z",
     "iopub.status.idle": "2022-07-23T11:33:10.065054Z",
     "shell.execute_reply": "2022-07-23T11:33:10.064351Z"
    },
    "papermill": {
     "duration": 0.087114,
     "end_time": "2022-07-23T11:33:10.066726",
     "exception": false,
     "start_time": "2022-07-23T11:33:09.979612",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "discourse_types = train_df.discourse_type.unique()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b5464bf7",
   "metadata": {
    "papermill": {
     "duration": 0.077715,
     "end_time": "2022-07-23T11:33:10.222093",
     "exception": false,
     "start_time": "2022-07-23T11:33:10.144378",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "So `Claim` and `Evidence` appear to have the largest word count."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aa80aec8",
   "metadata": {
    "papermill": {
     "duration": 0.076016,
     "end_time": "2022-07-23T11:33:10.374746",
     "exception": false,
     "start_time": "2022-07-23T11:33:10.298730",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 2021 Data"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "438d1c2b",
   "metadata": {
    "papermill": {
     "duration": 0.076586,
     "end_time": "2022-07-23T11:33:10.527930",
     "exception": false,
     "start_time": "2022-07-23T11:33:10.451344",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "In [this](https://www.kaggle.com/code/lextoumbourou/feedback-prize-inference-on-2021-dataset) notebook, I made predictions on the full 2021 set from the original Feedback competition.\n",
    "\n",
    "Let's load them here. I'll exclude any that are in the 2022 subset."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "484a0aa2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-23T11:33:10.683520Z",
     "iopub.status.busy": "2022-07-23T11:33:10.683263Z",
     "iopub.status.idle": "2022-07-23T11:33:11.976377Z",
     "shell.execute_reply": "2022-07-23T11:33:11.975370Z"
    },
    "papermill": {
     "duration": 1.373379,
     "end_time": "2022-07-23T11:33:11.978875",
     "exception": false,
     "start_time": "2022-07-23T11:33:10.605496",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train_2021_preds_df = pd.read_csv('../input/feedback-prize-inference-on-2021-dataset/train_2021_preds.csv')\n",
    "train_2021_preds_df = train_2021_preds_df[train_2021_preds_df.in_2022 == False]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "96eefbf4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-23T11:33:12.135407Z",
     "iopub.status.busy": "2022-07-23T11:33:12.134802Z",
     "iopub.status.idle": "2022-07-23T11:33:12.150966Z",
     "shell.execute_reply": "2022-07-23T11:33:12.150231Z"
    },
    "papermill": {
     "duration": 0.096246,
     "end_time": "2022-07-23T11:33:12.153350",
     "exception": false,
     "start_time": "2022-07-23T11:33:12.057104",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>essay_id</th>\n",
       "      <th>discourse_id</th>\n",
       "      <th>discourse_text</th>\n",
       "      <th>discourse_type</th>\n",
       "      <th>in_2022</th>\n",
       "      <th>topic</th>\n",
       "      <th>topic_name</th>\n",
       "      <th>essay_fn</th>\n",
       "      <th>Adequate</th>\n",
       "      <th>Effective</th>\n",
       "      <th>Ineffective</th>\n",
       "      <th>discourse_effectiveness</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>A8445CABFECE</td>\n",
       "      <td>1.622576e+12</td>\n",
       "      <td>Drivers should not be able to use phones while...</td>\n",
       "      <td>Position</td>\n",
       "      <td>False</td>\n",
       "      <td>13</td>\n",
       "      <td>driving phone phones cell</td>\n",
       "      <td>../input/feedback-prize-2021/train/A8445CABFEC...</td>\n",
       "      <td>0.883984</td>\n",
       "      <td>0.036340</td>\n",
       "      <td>0.079919</td>\n",
       "      <td>Adequate</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>A8445CABFECE</td>\n",
       "      <td>1.622576e+12</td>\n",
       "      <td>Drivers who used their phone while operating a...</td>\n",
       "      <td>Claim</td>\n",
       "      <td>False</td>\n",
       "      <td>13</td>\n",
       "      <td>driving phone phones cell</td>\n",
       "      <td>../input/feedback-prize-2021/train/A8445CABFEC...</td>\n",
       "      <td>0.880176</td>\n",
       "      <td>0.041171</td>\n",
       "      <td>0.078351</td>\n",
       "      <td>Adequate</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>A8445CABFECE</td>\n",
       "      <td>1.622576e+12</td>\n",
       "      <td>According to an article by the Edgar Snyder Fi...</td>\n",
       "      <td>Evidence</td>\n",
       "      <td>False</td>\n",
       "      <td>13</td>\n",
       "      <td>driving phone phones cell</td>\n",
       "      <td>../input/feedback-prize-2021/train/A8445CABFEC...</td>\n",
       "      <td>0.697168</td>\n",
       "      <td>0.226025</td>\n",
       "      <td>0.076971</td>\n",
       "      <td>Adequate</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>A8445CABFECE</td>\n",
       "      <td>1.622576e+12</td>\n",
       "      <td>In conclusion, drivers should not able to work...</td>\n",
       "      <td>Concluding Statement</td>\n",
       "      <td>False</td>\n",
       "      <td>13</td>\n",
       "      <td>driving phone phones cell</td>\n",
       "      <td>../input/feedback-prize-2021/train/A8445CABFEC...</td>\n",
       "      <td>0.875977</td>\n",
       "      <td>0.022543</td>\n",
       "      <td>0.101404</td>\n",
       "      <td>Adequate</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>6B4F7A0165B9</td>\n",
       "      <td>1.622644e+12</td>\n",
       "      <td>The ability to stay connected to people we kno...</td>\n",
       "      <td>Lead</td>\n",
       "      <td>False</td>\n",
       "      <td>13</td>\n",
       "      <td>driving phone phones cell</td>\n",
       "      <td>../input/feedback-prize-2021/train/6B4F7A0165B...</td>\n",
       "      <td>0.361206</td>\n",
       "      <td>0.515234</td>\n",
       "      <td>0.123700</td>\n",
       "      <td>Effective</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        essay_id  discourse_id  \\\n",
       "10  A8445CABFECE  1.622576e+12   \n",
       "11  A8445CABFECE  1.622576e+12   \n",
       "12  A8445CABFECE  1.622576e+12   \n",
       "13  A8445CABFECE  1.622576e+12   \n",
       "14  6B4F7A0165B9  1.622644e+12   \n",
       "\n",
       "                                       discourse_text        discourse_type  \\\n",
       "10  Drivers should not be able to use phones while...              Position   \n",
       "11  Drivers who used their phone while operating a...                 Claim   \n",
       "12  According to an article by the Edgar Snyder Fi...              Evidence   \n",
       "13  In conclusion, drivers should not able to work...  Concluding Statement   \n",
       "14  The ability to stay connected to people we kno...                  Lead   \n",
       "\n",
       "    in_2022  topic                 topic_name  \\\n",
       "10    False     13  driving phone phones cell   \n",
       "11    False     13  driving phone phones cell   \n",
       "12    False     13  driving phone phones cell   \n",
       "13    False     13  driving phone phones cell   \n",
       "14    False     13  driving phone phones cell   \n",
       "\n",
       "                                             essay_fn  Adequate  Effective  \\\n",
       "10  ../input/feedback-prize-2021/train/A8445CABFEC...  0.883984   0.036340   \n",
       "11  ../input/feedback-prize-2021/train/A8445CABFEC...  0.880176   0.041171   \n",
       "12  ../input/feedback-prize-2021/train/A8445CABFEC...  0.697168   0.226025   \n",
       "13  ../input/feedback-prize-2021/train/A8445CABFEC...  0.875977   0.022543   \n",
       "14  ../input/feedback-prize-2021/train/6B4F7A0165B...  0.361206   0.515234   \n",
       "\n",
       "    Ineffective discourse_effectiveness  \n",
       "10     0.079919                Adequate  \n",
       "11     0.078351                Adequate  \n",
       "12     0.076971                Adequate  \n",
       "13     0.101404                Adequate  \n",
       "14     0.123700               Effective  "
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_2021_preds_df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "95b01824",
   "metadata": {
    "papermill": {
     "duration": 0.077274,
     "end_time": "2022-07-23T11:33:12.314647",
     "exception": false,
     "start_time": "2022-07-23T11:33:12.237373",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "I'm going to get essays that contain the most confident predictions.\n",
    "\n",
    "That should maintain the same distribution of discourse types."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "599d71cb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-23T11:33:12.469609Z",
     "iopub.status.busy": "2022-07-23T11:33:12.468976Z",
     "iopub.status.idle": "2022-07-23T11:33:12.473079Z",
     "shell.execute_reply": "2022-07-23T11:33:12.472226Z"
    },
    "papermill": {
     "duration": 0.084392,
     "end_time": "2022-07-23T11:33:12.474976",
     "exception": false,
     "start_time": "2022-07-23T11:33:12.390584",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "num_essays = 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "a2b6c875",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-23T11:33:12.629253Z",
     "iopub.status.busy": "2022-07-23T11:33:12.629059Z",
     "iopub.status.idle": "2022-07-23T11:33:12.638674Z",
     "shell.execute_reply": "2022-07-23T11:33:12.638039Z"
    },
    "papermill": {
     "duration": 0.089109,
     "end_time": "2022-07-23T11:33:12.640306",
     "exception": false,
     "start_time": "2022-07-23T11:33:12.551197",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train_2021_preds_df['label_prob'] = train_2021_preds_df[labels].max(axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "6a8230bc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-23T11:33:12.795880Z",
     "iopub.status.busy": "2022-07-23T11:33:12.795450Z",
     "iopub.status.idle": "2022-07-23T11:33:12.798470Z",
     "shell.execute_reply": "2022-07-23T11:33:12.797830Z"
    },
    "papermill": {
     "duration": 0.082674,
     "end_time": "2022-07-23T11:33:12.800205",
     "exception": false,
     "start_time": "2022-07-23T11:33:12.717531",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# train_2021_preds_df = train_2021_preds_df.merge(topic_pred_df, on='essay_id', how='left')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "76868cfe",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-23T11:33:12.958195Z",
     "iopub.status.busy": "2022-07-23T11:33:12.957995Z",
     "iopub.status.idle": "2022-07-23T11:33:12.993211Z",
     "shell.execute_reply": "2022-07-23T11:33:12.992464Z"
    },
    "papermill": {
     "duration": 0.115682,
     "end_time": "2022-07-23T11:33:12.995250",
     "exception": false,
     "start_time": "2022-07-23T11:33:12.879568",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "confident_essays = train_2021_preds_df[['essay_id', 'label_prob']].groupby('essay_id').mean().sort_values('label_prob', ascending=False)[:num_essays]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "5cb514da",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-23T11:33:13.161162Z",
     "iopub.status.busy": "2022-07-23T11:33:13.160943Z",
     "iopub.status.idle": "2022-07-23T11:33:13.164732Z",
     "shell.execute_reply": "2022-07-23T11:33:13.163948Z"
    },
    "papermill": {
     "duration": 0.085185,
     "end_time": "2022-07-23T11:33:13.166662",
     "exception": false,
     "start_time": "2022-07-23T11:33:13.081477",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "essay_ids = set(confident_essays.index)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "d1ad0586",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-23T11:33:13.324991Z",
     "iopub.status.busy": "2022-07-23T11:33:13.324791Z",
     "iopub.status.idle": "2022-07-23T11:33:13.337558Z",
     "shell.execute_reply": "2022-07-23T11:33:13.336892Z"
    },
    "papermill": {
     "duration": 0.09433,
     "end_time": "2022-07-23T11:33:13.339163",
     "exception": false,
     "start_time": "2022-07-23T11:33:13.244833",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train_2021_filt_df = train_2021_preds_df[train_2021_preds_df.essay_id.isin(essay_ids)].reset_index(drop=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "95600eda",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-23T11:33:13.493580Z",
     "iopub.status.busy": "2022-07-23T11:33:13.493337Z",
     "iopub.status.idle": "2022-07-23T11:33:13.498008Z",
     "shell.execute_reply": "2022-07-23T11:33:13.497368Z"
    },
    "papermill": {
     "duration": 0.083789,
     "end_time": "2022-07-23T11:33:13.499712",
     "exception": false,
     "start_time": "2022-07-23T11:33:13.415923",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2, 13)"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_2021_filt_df.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4f3cecf9",
   "metadata": {
    "papermill": {
     "duration": 0.077989,
     "end_time": "2022-07-23T11:33:13.655139",
     "exception": false,
     "start_time": "2022-07-23T11:33:13.577150",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Okay, let's get to training a model!"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "23b56116",
   "metadata": {
    "papermill": {
     "duration": 0.078437,
     "end_time": "2022-07-23T11:33:13.810462",
     "exception": false,
     "start_time": "2022-07-23T11:33:13.732025",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Config"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f2bca4c3",
   "metadata": {
    "papermill": {
     "duration": 0.089594,
     "end_time": "2022-07-23T11:33:13.982432",
     "exception": false,
     "start_time": "2022-07-23T11:33:13.892838",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "I include some additional dropout in the config as the model tends to overfit as well as label smoothing, as it seems to work slightly better in the tests I've performed."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "098187a0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-23T11:33:14.147256Z",
     "iopub.status.busy": "2022-07-23T11:33:14.146595Z",
     "iopub.status.idle": "2022-07-23T11:33:14.157189Z",
     "shell.execute_reply": "2022-07-23T11:33:14.156318Z"
    },
    "papermill": {
     "duration": 0.091056,
     "end_time": "2022-07-23T11:33:14.158966",
     "exception": false,
     "start_time": "2022-07-23T11:33:14.067910",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "config = SimpleNamespace()\n",
    "\n",
    "config.seed = 42\n",
    "config.model_name = 'microsoft/deberta-v3-large'\n",
    "config.output_path = Path('./')\n",
    "config.input_path = Path('../input/feedback-prize-effectiveness')\n",
    "\n",
    "config.n_folds = 4\n",
    "config.lr = 1e-5\n",
    "config.weight_decay = 0.01\n",
    "config.epochs = 4\n",
    "config.batch_size = 4\n",
    "config.gradient_accumulation_steps = 1\n",
    "config.warm_up_ratio = 0.1\n",
    "config.max_len = 512\n",
    "config.hidden_dropout_prob = 0.1\n",
    "config.label_smoothing_factor = 0.\n",
    "config.eval_per_epoch = 2\n",
    "\n",
    "logging.disable(logging.WARNING)\n",
    "\n",
    "seed_everything(config.seed)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "603de4ae",
   "metadata": {
    "papermill": {
     "duration": 0.075937,
     "end_time": "2022-07-23T11:33:14.312385",
     "exception": false,
     "start_time": "2022-07-23T11:33:14.236448",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# WanDB"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "ee415f78",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-23T11:33:14.469086Z",
     "iopub.status.busy": "2022-07-23T11:33:14.468571Z",
     "iopub.status.idle": "2022-07-23T11:33:14.472697Z",
     "shell.execute_reply": "2022-07-23T11:33:14.471752Z"
    },
    "papermill": {
     "duration": 0.08448,
     "end_time": "2022-07-23T11:33:14.474784",
     "exception": false,
     "start_time": "2022-07-23T11:33:14.390304",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "if run_type == 'Interactive':\n",
    "    print('Wandb in offline mode.')\n",
    "    os.environ['WANDB_MODE'] = 'offline'"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f9aaba0e",
   "metadata": {
    "papermill": {
     "duration": 0.076012,
     "end_time": "2022-07-23T11:33:14.627209",
     "exception": false,
     "start_time": "2022-07-23T11:33:14.551197",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "The following lines of code assumes that you have a [User Secret](https://www.kaggle.com/product-feedback/114053) setup called `wandb` with your wandb API key."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "49f88d7f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-23T11:33:14.784074Z",
     "iopub.status.busy": "2022-07-23T11:33:14.783857Z",
     "iopub.status.idle": "2022-07-23T11:33:17.089347Z",
     "shell.execute_reply": "2022-07-23T11:33:17.088261Z"
    },
    "papermill": {
     "duration": 2.387079,
     "end_time": "2022-07-23T11:33:17.092179",
     "exception": false,
     "start_time": "2022-07-23T11:33:14.705100",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Authenticating with wandb.\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: Appending key for api.wandb.ai to your netrc file: /root/.netrc\r\n"
     ]
    }
   ],
   "source": [
    "print('Authenticating with wandb.')\n",
    "from kaggle_secrets import UserSecretsClient\n",
    "user_secrets = UserSecretsClient()\n",
    "wandb_creds = user_secrets.get_secret(\"wandb\")\n",
    "\n",
    "!wandb login {wandb_creds}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "4467d40c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-23T11:33:17.373507Z",
     "iopub.status.busy": "2022-07-23T11:33:17.373133Z",
     "iopub.status.idle": "2022-07-23T11:33:17.377782Z",
     "shell.execute_reply": "2022-07-23T11:33:17.377092Z"
    },
    "papermill": {
     "duration": 0.140011,
     "end_time": "2022-07-23T11:33:17.379412",
     "exception": false,
     "start_time": "2022-07-23T11:33:17.239401",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "wandb.config = config.__dict__"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "35361c20",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-23T11:33:17.632244Z",
     "iopub.status.busy": "2022-07-23T11:33:17.632030Z",
     "iopub.status.idle": "2022-07-23T11:33:23.934183Z",
     "shell.execute_reply": "2022-07-23T11:33:23.933229Z"
    },
    "papermill": {
     "duration": 6.431698,
     "end_time": "2022-07-23T11:33:23.936178",
     "exception": false,
     "start_time": "2022-07-23T11:33:17.504480",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[34m\u001b[1mwandb\u001b[0m: Currently logged in as: \u001b[33mharshitkmr\u001b[0m. Use \u001b[1m`wandb login --relogin`\u001b[0m to force relogin\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "wandb version 0.12.21 is available!  To upgrade, please run:\n",
       " $ pip install wandb --upgrade"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "Tracking run with wandb version 0.12.16"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "Run data is saved locally in <code>/kaggle/working/wandb/run-20220723_113318-q6ql6rbv</code>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "Syncing run <strong><a href=\"https://wandb.ai/harshitkmr/feedback-prize-effectiveness/runs/q6ql6rbv\" target=\"_blank\">tough-galaxy-5</a></strong> to <a href=\"https://wandb.ai/harshitkmr/feedback-prize-effectiveness\" target=\"_blank\">Weights & Biases</a> (<a href=\"https://wandb.me/run\" target=\"_blank\">docs</a>)<br/>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<button onClick=\"this.nextSibling.style.display='block';this.style.display='none';\">Display W&B run</button><iframe src=\"https://wandb.ai/harshitkmr/feedback-prize-effectiveness/runs/q6ql6rbv?jupyter=true\" style=\"border:none;width:100%;height:420px;display:none;\"></iframe>"
      ],
      "text/plain": [
       "<wandb.sdk.wandb_run.Run at 0x7fec1e29a9d0>"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "wandb.init(project=\"feedback-prize-effectiveness\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "575023ca",
   "metadata": {
    "papermill": {
     "duration": 0.089802,
     "end_time": "2022-07-23T11:33:24.120863",
     "exception": false,
     "start_time": "2022-07-23T11:33:24.031061",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Setup CV"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1e0f5276",
   "metadata": {
    "papermill": {
     "duration": 0.080643,
     "end_time": "2022-07-23T11:33:24.288723",
     "exception": false,
     "start_time": "2022-07-23T11:33:24.208080",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Note that I am using `StratifiedKFold` instead of `StratifiedGroupKFold` here, as it performs better on the LB. This comes at the expense of an accurate CV score."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "b804e7e7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-23T11:33:24.455263Z",
     "iopub.status.busy": "2022-07-23T11:33:24.455004Z",
     "iopub.status.idle": "2022-07-23T11:33:24.460200Z",
     "shell.execute_reply": "2022-07-23T11:33:24.459489Z"
    },
    "papermill": {
     "duration": 0.094169,
     "end_time": "2022-07-23T11:33:24.463861",
     "exception": false,
     "start_time": "2022-07-23T11:33:24.369692",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "cv = StratifiedKFold(n_splits=config.n_folds, shuffle=True, random_state=config.seed)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "666897ec",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-23T11:33:24.633433Z",
     "iopub.status.busy": "2022-07-23T11:33:24.633178Z",
     "iopub.status.idle": "2022-07-23T11:33:24.707376Z",
     "shell.execute_reply": "2022-07-23T11:33:24.706735Z"
    },
    "papermill": {
     "duration": 0.160706,
     "end_time": "2022-07-23T11:33:24.709103",
     "exception": false,
     "start_time": "2022-07-23T11:33:24.548397",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train_df['fold'] = -1\n",
    "for fold_num, (train_idxs, test_idxs) in enumerate(cv.split(train_df.index, train_df.discourse_effectiveness, train_df.essay_id)):\n",
    "    train_df.loc[test_idxs, ['fold']] = fold_num"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "673eb216",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-23T11:33:24.878065Z",
     "iopub.status.busy": "2022-07-23T11:33:24.877857Z",
     "iopub.status.idle": "2022-07-23T11:33:24.894026Z",
     "shell.execute_reply": "2022-07-23T11:33:24.893347Z"
    },
    "papermill": {
     "duration": 0.102929,
     "end_time": "2022-07-23T11:33:24.896438",
     "exception": false,
     "start_time": "2022-07-23T11:33:24.793509",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>discourse_id</th>\n",
       "      <th>essay_id</th>\n",
       "      <th>discourse_text</th>\n",
       "      <th>discourse_type</th>\n",
       "      <th>discourse_effectiveness</th>\n",
       "      <th>topic</th>\n",
       "      <th>topic_name</th>\n",
       "      <th>word_count</th>\n",
       "      <th>fold</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0013cc385424</td>\n",
       "      <td>007ACE74B050</td>\n",
       "      <td>Hi, i'm Isaac, i'm going to be writing about h...</td>\n",
       "      <td>Lead</td>\n",
       "      <td>Adequate</td>\n",
       "      <td>11</td>\n",
       "      <td>face mars landform aliens</td>\n",
       "      <td>67</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>9704a709b505</td>\n",
       "      <td>007ACE74B050</td>\n",
       "      <td>On my perspective, I think that the face is a ...</td>\n",
       "      <td>Position</td>\n",
       "      <td>Adequate</td>\n",
       "      <td>11</td>\n",
       "      <td>face mars landform aliens</td>\n",
       "      <td>41</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>c22adee811b6</td>\n",
       "      <td>007ACE74B050</td>\n",
       "      <td>I think that the face is a natural landform be...</td>\n",
       "      <td>Claim</td>\n",
       "      <td>Adequate</td>\n",
       "      <td>11</td>\n",
       "      <td>face mars landform aliens</td>\n",
       "      <td>21</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>a10d361e54e4</td>\n",
       "      <td>007ACE74B050</td>\n",
       "      <td>If life was on Mars, we would know by now. The...</td>\n",
       "      <td>Evidence</td>\n",
       "      <td>Adequate</td>\n",
       "      <td>11</td>\n",
       "      <td>face mars landform aliens</td>\n",
       "      <td>72</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>db3e453ec4e2</td>\n",
       "      <td>007ACE74B050</td>\n",
       "      <td>People thought that the face was formed by ali...</td>\n",
       "      <td>Counterclaim</td>\n",
       "      <td>Adequate</td>\n",
       "      <td>11</td>\n",
       "      <td>face mars landform aliens</td>\n",
       "      <td>18</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   discourse_id      essay_id  \\\n",
       "0  0013cc385424  007ACE74B050   \n",
       "1  9704a709b505  007ACE74B050   \n",
       "2  c22adee811b6  007ACE74B050   \n",
       "3  a10d361e54e4  007ACE74B050   \n",
       "4  db3e453ec4e2  007ACE74B050   \n",
       "\n",
       "                                      discourse_text discourse_type  \\\n",
       "0  Hi, i'm Isaac, i'm going to be writing about h...           Lead   \n",
       "1  On my perspective, I think that the face is a ...       Position   \n",
       "2  I think that the face is a natural landform be...          Claim   \n",
       "3  If life was on Mars, we would know by now. The...       Evidence   \n",
       "4  People thought that the face was formed by ali...   Counterclaim   \n",
       "\n",
       "  discourse_effectiveness  topic                 topic_name  word_count  fold  \n",
       "0                Adequate     11  face mars landform aliens          67     0  \n",
       "1                Adequate     11  face mars landform aliens          41     0  \n",
       "2                Adequate     11  face mars landform aliens          21     1  \n",
       "3                Adequate     11  face mars landform aliens          72     1  \n",
       "4                Adequate     11  face mars landform aliens          18     1  "
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "4eb5d06e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-23T11:33:25.063114Z",
     "iopub.status.busy": "2022-07-23T11:33:25.062843Z",
     "iopub.status.idle": "2022-07-23T11:33:25.583407Z",
     "shell.execute_reply": "2022-07-23T11:33:25.582594Z"
    },
    "papermill": {
     "duration": 0.605481,
     "end_time": "2022-07-23T11:33:25.585534",
     "exception": false,
     "start_time": "2022-07-23T11:33:24.980053",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train_df.to_csv(config.output_path / 'train_folds.csv', index=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1507fc57",
   "metadata": {
    "papermill": {
     "duration": 0.084172,
     "end_time": "2022-07-23T11:33:25.750817",
     "exception": false,
     "start_time": "2022-07-23T11:33:25.666645",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Tokenizer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "55e2ea9e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-23T11:33:25.917744Z",
     "iopub.status.busy": "2022-07-23T11:33:25.917451Z",
     "iopub.status.idle": "2022-07-23T11:33:25.926950Z",
     "shell.execute_reply": "2022-07-23T11:33:25.926232Z"
    },
    "papermill": {
     "duration": 0.096954,
     "end_time": "2022-07-23T11:33:25.929333",
     "exception": false,
     "start_time": "2022-07-23T11:33:25.832379",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'microsoft/deberta-v3-large'"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "config.model_name"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "c86b511a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-23T11:33:26.094208Z",
     "iopub.status.busy": "2022-07-23T11:33:26.093970Z",
     "iopub.status.idle": "2022-07-23T11:33:30.136701Z",
     "shell.execute_reply": "2022-07-23T11:33:30.135905Z"
    },
    "papermill": {
     "duration": 4.126977,
     "end_time": "2022-07-23T11:33:30.139045",
     "exception": false,
     "start_time": "2022-07-23T11:33:26.012068",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "2d26e87e61cc4bf89a2b875da7178ad3",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Downloading:   0%|          | 0.00/52.0 [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "d21cfd5229c04a9d81a0120fe5f98949",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Downloading:   0%|          | 0.00/580 [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "fea7bc15757449f29e7babb99959ceb2",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Downloading:   0%|          | 0.00/2.35M [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "tokenizer = AutoTokenizer.from_pretrained(config.model_name, use_fast=True)\n",
    "tokenizer.model_max_length = config.max_len"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "34061ea7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-23T11:33:30.309838Z",
     "iopub.status.busy": "2022-07-23T11:33:30.309607Z",
     "iopub.status.idle": "2022-07-23T11:33:30.315450Z",
     "shell.execute_reply": "2022-07-23T11:33:30.314815Z"
    },
    "papermill": {
     "duration": 0.095864,
     "end_time": "2022-07-23T11:33:30.317794",
     "exception": false,
     "start_time": "2022-07-23T11:33:30.221930",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "PreTrainedTokenizer(name_or_path='microsoft/deberta-v3-large', vocab_size=128000, model_max_len=512, is_fast=False, padding_side='right', truncation_side='right', special_tokens={'bos_token': '[CLS]', 'eos_token': '[SEP]', 'unk_token': '[UNK]', 'sep_token': '[SEP]', 'pad_token': '[PAD]', 'cls_token': '[CLS]', 'mask_token': '[MASK]'})"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tokenizer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "5c98667d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-23T11:33:30.489989Z",
     "iopub.status.busy": "2022-07-23T11:33:30.489779Z",
     "iopub.status.idle": "2022-07-23T11:33:30.497743Z",
     "shell.execute_reply": "2022-07-23T11:33:30.497088Z"
    },
    "papermill": {
     "duration": 0.094548,
     "end_time": "2022-07-23T11:33:30.499871",
     "exception": false,
     "start_time": "2022-07-23T11:33:30.405323",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def get_essay(essay_fns):\n",
    "    essay_cache = {}\n",
    "\n",
    "    output = []\n",
    "    for essay_fn in essay_fns:\n",
    "        if essay_fn not in essay_cache:\n",
    "            essay_txt = open(essay_fn).read().strip().lower()\n",
    "            essay_cache[essay_fn] = essay_txt\n",
    "        output.append(essay_cache[essay_fn])\n",
    "\n",
    "    return output"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d52be747",
   "metadata": {
    "papermill": {
     "duration": 0.082559,
     "end_time": "2022-07-23T11:33:30.668014",
     "exception": false,
     "start_time": "2022-07-23T11:33:30.585455",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "The essay string is passed as the `text_pair` argument to the tokenisation function. I got this idea from [this](https://www.kaggle.com/code/abhishek/tez-for-feedback-v2-0) kernel. I can't tell you exactly why it helps to pass as `text_pair` instead of concatenating onto the sequence, but it seems to work a bit."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "9860a7ab",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-23T11:33:30.835909Z",
     "iopub.status.busy": "2022-07-23T11:33:30.835689Z",
     "iopub.status.idle": "2022-07-23T11:33:30.840895Z",
     "shell.execute_reply": "2022-07-23T11:33:30.840135Z"
    },
    "papermill": {
     "duration": 0.092516,
     "end_time": "2022-07-23T11:33:30.843038",
     "exception": false,
     "start_time": "2022-07-23T11:33:30.750522",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def tokenizer_func(x):\n",
    "    return tokenizer(x[\"inputs\"], get_essay(x['essay_fn']), truncation=True, max_length=config.max_len)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fa6076af",
   "metadata": {
    "papermill": {
     "duration": 0.083286,
     "end_time": "2022-07-23T11:33:31.014956",
     "exception": false,
     "start_time": "2022-07-23T11:33:30.931670",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Since the `discourse_type` will be potentially valuable information, I'll concatenate it to the essay elements.\n",
    "\n",
    "I'm also concatenating the topic information.\n",
    "\n",
    "Lastly, converting all text to lowercase as it performs better on CV and LB."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "7c192845",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-23T11:33:31.182313Z",
     "iopub.status.busy": "2022-07-23T11:33:31.182076Z",
     "iopub.status.idle": "2022-07-23T11:33:31.187988Z",
     "shell.execute_reply": "2022-07-23T11:33:31.187111Z"
    },
    "papermill": {
     "duration": 0.092491,
     "end_time": "2022-07-23T11:33:31.190325",
     "exception": false,
     "start_time": "2022-07-23T11:33:31.097834",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def add_inputs(df, basepath):\n",
    "    df['essay_fn'] = basepath + '/' + df.essay_id + '.txt'\n",
    "    df['inputs'] = df.discourse_type.str.lower() +' ' + df.topic_name + tokenizer.sep_token + df.discourse_text.str.lower()\n",
    "    return df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "7658bcc2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-23T11:33:31.359690Z",
     "iopub.status.busy": "2022-07-23T11:33:31.359453Z",
     "iopub.status.idle": "2022-07-23T11:33:31.462406Z",
     "shell.execute_reply": "2022-07-23T11:33:31.461668Z"
    },
    "papermill": {
     "duration": 0.188861,
     "end_time": "2022-07-23T11:33:31.464343",
     "exception": false,
     "start_time": "2022-07-23T11:33:31.275482",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train_df = add_inputs(train_df, str(config.input_path / 'train'))\n",
    "train_2021_filt_df = add_inputs(train_2021_filt_df, '../input/feedback-prize-2021/train')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ed38d757",
   "metadata": {
    "papermill": {
     "duration": 0.083735,
     "end_time": "2022-07-23T11:33:31.634386",
     "exception": false,
     "start_time": "2022-07-23T11:33:31.550651",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Model"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "af8b021f",
   "metadata": {
    "papermill": {
     "duration": 0.081925,
     "end_time": "2022-07-23T11:33:31.799525",
     "exception": false,
     "start_time": "2022-07-23T11:33:31.717600",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "For maximum experimentation flexibility, I've setup a custom head.\n",
    "\n",
    "I've included an implementation of [Multi-Sample Dropout](https://arxiv.org/abs/1905.09788) as the model is overfitting quite quickly.\n",
    "\n",
    "When using HuggingFace Transformers, the [Trainer](https://huggingface.co/docs/transformers/main_classes/trainer) class has a few rules you need to follow when creating custom models:\n",
    "\n",
    "* your model always return tuples or subclasses of ModelOutput.\n",
    "* your model can compute the loss if a labels argument is provided and that loss is returned as the first element of the tuple (if your model returns tuples)\n",
    "* your model can accept multiple label arguments (use the label_names in your TrainingArguments to indicate their name to the Trainer) but none of them should be named \"label\".\n",
    "\n",
    "I've also replaced the `ContextPooler` with a mean pooling layer, as it works better in the tests I've run outside of Kaggle."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "89daf1eb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-23T11:33:31.967725Z",
     "iopub.status.busy": "2022-07-23T11:33:31.967463Z",
     "iopub.status.idle": "2022-07-23T11:33:32.006161Z",
     "shell.execute_reply": "2022-07-23T11:33:32.005521Z"
    },
    "papermill": {
     "duration": 0.12621,
     "end_time": "2022-07-23T11:33:32.007887",
     "exception": false,
     "start_time": "2022-07-23T11:33:31.881677",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import torch\n",
    "from torch import nn\n",
    "from transformers import AutoConfig, AutoModelForSequenceClassification\n",
    "from transformers.models.deberta_v2.modeling_deberta_v2 import ContextPooler\n",
    "from transformers.models.deberta_v2.modeling_deberta_v2 import StableDropout\n",
    "from transformers.modeling_outputs import TokenClassifierOutput\n",
    "\n",
    "def get_dropouts(num, start_prob, increment):\n",
    "    return [StableDropout(start_prob + (increment * i)) for i in range(num)]  \n",
    "\n",
    "class MeanPooling(nn.Module):\n",
    "    def __init__(self):\n",
    "        super(MeanPooling, self).__init__()\n",
    "        \n",
    "    def forward(self, last_hidden_state, attention_mask):\n",
    "        input_mask_expanded = attention_mask.unsqueeze(-1).expand(last_hidden_state.size()).float()\n",
    "        sum_embeddings = torch.sum(last_hidden_state * input_mask_expanded, 1)\n",
    "        sum_mask = input_mask_expanded.sum(1)\n",
    "        sum_mask = torch.clamp(sum_mask, min=1e-9)\n",
    "        mean_embeddings = sum_embeddings / sum_mask\n",
    "        return mean_embeddings\n",
    "\n",
    "class CustomModel(nn.Module):\n",
    "    def __init__(self, backbone):\n",
    "        super(CustomModel, self).__init__()\n",
    "        \n",
    "        self.model = backbone\n",
    "        self.config = self.model.config\n",
    "        self.num_labels = self.config.num_labels\n",
    "\n",
    "        # self.pooler = ContextPooler(self.config)\n",
    "        self.pooler = MeanPooling()\n",
    "        \n",
    "        self.classifier = nn.Linear(self.config.hidden_size, self.num_labels)\n",
    "    \n",
    "        self.dropouts = get_dropouts(num=5, start_prob=config.hidden_dropout_prob - 0.02, increment=0.01)\n",
    "    \n",
    "    def forward(\n",
    "        self,\n",
    "        input_ids=None,\n",
    "        attention_mask=None,\n",
    "        token_type_ids=None,\n",
    "        position_ids=None,\n",
    "        inputs_embeds=None,\n",
    "        labels=None,\n",
    "        output_attentions=None,\n",
    "        output_hidden_states=None,\n",
    "        return_dict=None\n",
    "    ):\n",
    "        outputs = self.model.deberta(\n",
    "            input_ids,\n",
    "            token_type_ids=token_type_ids,\n",
    "            attention_mask=attention_mask,\n",
    "            position_ids=position_ids,\n",
    "            inputs_embeds=inputs_embeds,\n",
    "            output_attentions=output_attentions,\n",
    "            output_hidden_states=output_hidden_states,\n",
    "            return_dict=return_dict,\n",
    "        )\n",
    "        \n",
    "        encoder_layer = outputs[0]\n",
    "        pooled_output = self.pooler(encoder_layer, attention_mask)\n",
    "                      \n",
    "        # Multi-sample dropout.\n",
    "        num_dps = float(len(self.dropouts))\n",
    "        for ii, drop in enumerate(self.dropouts):\n",
    "            if ii == 0:\n",
    "                logits = (self.classifier(drop(pooled_output)) / num_dps)\n",
    "            else:\n",
    "                logits += (self.classifier(drop(pooled_output)) / num_dps)\n",
    "\n",
    "        loss = None\n",
    "        if labels is not None:\n",
    "            loss_fn = nn.CrossEntropyLoss()\n",
    "            logits = logits.view(-1, self.num_labels)\n",
    "            loss = loss_fn(logits, labels.view(-1))\n",
    "\n",
    "        output = (logits,) + outputs[1:]\n",
    "\n",
    "        return TokenClassifierOutput(loss=loss, logits=logits, hidden_states=outputs.hidden_states, attentions=outputs.attentions)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "3ddbf514",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-23T11:33:32.177803Z",
     "iopub.status.busy": "2022-07-23T11:33:32.177583Z",
     "iopub.status.idle": "2022-07-23T11:33:32.182645Z",
     "shell.execute_reply": "2022-07-23T11:33:32.181728Z"
    },
    "papermill": {
     "duration": 0.092035,
     "end_time": "2022-07-23T11:33:32.185092",
     "exception": false,
     "start_time": "2022-07-23T11:33:32.093057",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def get_backbone_config():\n",
    "    model_config = AutoConfig.from_pretrained(config.model_name, num_labels=3)\n",
    "    model_config.hidden_dropout_prob = config.hidden_dropout_prob\n",
    "    return model_config"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "04872094",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-23T11:33:32.354609Z",
     "iopub.status.busy": "2022-07-23T11:33:32.354365Z",
     "iopub.status.idle": "2022-07-23T11:33:32.359361Z",
     "shell.execute_reply": "2022-07-23T11:33:32.358705Z"
    },
    "papermill": {
     "duration": 0.090694,
     "end_time": "2022-07-23T11:33:32.361505",
     "exception": false,
     "start_time": "2022-07-23T11:33:32.270811",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def get_model():\n",
    "    model_config = get_backbone_config()\n",
    "\n",
    "    model = AutoModelForSequenceClassification.from_pretrained(\n",
    "        config.model_name,\n",
    "        config=model_config,\n",
    "    )\n",
    "    return CustomModel(model)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c47887bd",
   "metadata": {
    "papermill": {
     "duration": 0.083798,
     "end_time": "2022-07-23T11:33:32.532600",
     "exception": false,
     "start_time": "2022-07-23T11:33:32.448802",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Need to save this to generate the backbone offline."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "7250a4d7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-23T11:33:32.698460Z",
     "iopub.status.busy": "2022-07-23T11:33:32.698203Z",
     "iopub.status.idle": "2022-07-23T11:33:33.037104Z",
     "shell.execute_reply": "2022-07-23T11:33:33.036247Z"
    },
    "papermill": {
     "duration": 0.423888,
     "end_time": "2022-07-23T11:33:33.039219",
     "exception": false,
     "start_time": "2022-07-23T11:33:32.615331",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "backbone_config = get_backbone_config()\n",
    "backbone_config.save_pretrained('./backbone_config')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "7b63cb3f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-23T11:33:33.220080Z",
     "iopub.status.busy": "2022-07-23T11:33:33.219852Z",
     "iopub.status.idle": "2022-07-23T11:33:57.728070Z",
     "shell.execute_reply": "2022-07-23T11:33:57.727320Z"
    },
    "papermill": {
     "duration": 24.594734,
     "end_time": "2022-07-23T11:33:57.730153",
     "exception": false,
     "start_time": "2022-07-23T11:33:33.135419",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "c8330395c762495eaafbb54c55144244",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Downloading:   0%|          | 0.00/833M [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "model = get_model()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "91e73e0e",
   "metadata": {
    "papermill": {
     "duration": 0.0832,
     "end_time": "2022-07-23T11:33:57.901714",
     "exception": false,
     "start_time": "2022-07-23T11:33:57.818514",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Training"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "53a86871",
   "metadata": {
    "papermill": {
     "duration": 0.083112,
     "end_time": "2022-07-23T11:33:58.068384",
     "exception": false,
     "start_time": "2022-07-23T11:33:57.985272",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "The loss function Cross-Entropy is identical to the competition metric when running the model output through Softmax.\n",
    "\n",
    "I'll include accuracy as an additional metric as it tends to be human interpretable."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "3028a0a2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-23T11:33:58.235896Z",
     "iopub.status.busy": "2022-07-23T11:33:58.235413Z",
     "iopub.status.idle": "2022-07-23T11:33:59.001309Z",
     "shell.execute_reply": "2022-07-23T11:33:59.000606Z"
    },
    "papermill": {
     "duration": 0.851707,
     "end_time": "2022-07-23T11:33:59.003205",
     "exception": false,
     "start_time": "2022-07-23T11:33:58.151498",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "09f7fec57b894ab597d6d05d3502fce5",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Downloading builder script:   0%|          | 0.00/1.41k [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "metric = load_metric('accuracy')\n",
    "\n",
    "def compute_metrics(eval_pred):\n",
    "    predictions, labels = eval_pred\n",
    "    predictions = np.argmax(predictions, axis=1)\n",
    "    return metric.compute(predictions=predictions, references=labels)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "39e24715",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-23T11:33:59.176027Z",
     "iopub.status.busy": "2022-07-23T11:33:59.175806Z",
     "iopub.status.idle": "2022-07-23T11:33:59.180223Z",
     "shell.execute_reply": "2022-07-23T11:33:59.179438Z"
    },
    "papermill": {
     "duration": 0.093435,
     "end_time": "2022-07-23T11:33:59.184135",
     "exception": false,
     "start_time": "2022-07-23T11:33:59.090700",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# train_df = train_df.sample(n=150)\n",
    "# config.epochs = 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "60d94631",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-23T11:33:59.371261Z",
     "iopub.status.busy": "2022-07-23T11:33:59.370938Z",
     "iopub.status.idle": "2022-07-23T11:33:59.395480Z",
     "shell.execute_reply": "2022-07-23T11:33:59.394868Z"
    },
    "papermill": {
     "duration": 0.12505,
     "end_time": "2022-07-23T11:33:59.398063",
     "exception": false,
     "start_time": "2022-07-23T11:33:59.273013",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def do_fold(fold_num):\n",
    "    train_data  = train_df.query(f'fold != {fold_num}').reset_index(drop=True)\n",
    "\n",
    "    val_data  = train_df.query(f'fold == {fold_num}').reset_index(drop=True)\n",
    "    \n",
    "    # Add 2021 to train data.\n",
    "    train_data = pd.concat([train_data, train_2021_filt_df[['inputs', 'essay_fn', 'discourse_effectiveness']]]).sample(frac=1., random_state=config.seed).reset_index(drop=True)\n",
    "    print(f'Train data size: {train_data.shape}')\n",
    "\n",
    "    train_dataset = Dataset.from_pandas(train_data[['inputs', 'essay_fn', 'discourse_effectiveness']]).rename_column('discourse_effectiveness', 'label').class_encode_column(\"label\")\n",
    "    val_dataset = Dataset.from_pandas(val_data[['inputs', 'essay_fn', 'discourse_effectiveness']]).rename_column('discourse_effectiveness', 'label').class_encode_column(\"label\")\n",
    "\n",
    "    train_tok_dataset = train_dataset.map(tokenizer_func, batched=True, remove_columns=('inputs', 'essay_fn'))\n",
    "    val_tok_dataset = val_dataset.map(tokenizer_func, batched=True, remove_columns=('inputs', 'essay_fn'))\n",
    "\n",
    "    data_collator = DataCollatorWithPadding(tokenizer=tokenizer, padding='longest')\n",
    "\n",
    "    num_steps = len(train_data) / config.batch_size / config.gradient_accumulation_steps\n",
    "    eval_steps = num_steps // config.eval_per_epoch\n",
    "    print(f'Num steps: {num_steps}, eval steps: {eval_steps}')\n",
    "\n",
    "    args = TrainingArguments(\n",
    "        output_dir=config.output_path,\n",
    "        learning_rate=config.lr,\n",
    "        warmup_ratio=config.warm_up_ratio,\n",
    "        lr_scheduler_type='cosine',\n",
    "        fp16=True,\n",
    "        per_device_train_batch_size=config.batch_size,\n",
    "        per_device_eval_batch_size=config.batch_size * 2,\n",
    "        num_train_epochs=config.epochs,\n",
    "        weight_decay=config.weight_decay,\n",
    "        report_to=\"wandb\",\n",
    "\n",
    "        evaluation_strategy='steps',\n",
    "        eval_steps=eval_steps, \n",
    "        save_strategy='steps',\n",
    "        save_steps=eval_steps,\n",
    "        \n",
    "        load_best_model_at_end=True,\n",
    "        gradient_accumulation_steps=config.gradient_accumulation_steps,\n",
    "        label_smoothing_factor=config.label_smoothing_factor,\n",
    "        save_total_limit=3  # Prevents running out of disk space.\n",
    "    )\n",
    "\n",
    "    model = get_model()\n",
    "\n",
    "    trainer = Trainer(\n",
    "        model,\n",
    "        args,\n",
    "        train_dataset=train_tok_dataset,\n",
    "        eval_dataset=val_tok_dataset,\n",
    "        tokenizer=tokenizer,\n",
    "        data_collator=data_collator,\n",
    "        compute_metrics=compute_metrics\n",
    "    )\n",
    "\n",
    "    trainer.train()\n",
    "    \n",
    "    trainer.save_model(config.output_path / f'fold_{fold_num}')\n",
    "    \n",
    "    outputs = trainer.predict(val_tok_dataset)\n",
    "\n",
    "    val_data[labels] = softmax(outputs.predictions, axis=1)\n",
    "    \n",
    "    !rm -rf {config.output_path / 'checkpoint'}*\n",
    "    \n",
    "    return val_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "26cab6f7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-23T11:33:59.567836Z",
     "iopub.status.busy": "2022-07-23T11:33:59.567634Z",
     "iopub.status.idle": "2022-07-23T22:21:58.224876Z",
     "shell.execute_reply": "2022-07-23T22:21:58.223996Z"
    },
    "papermill": {
     "duration": 38878.744223,
     "end_time": "2022-07-23T22:21:58.227032",
     "exception": false,
     "start_time": "2022-07-23T11:33:59.482809",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train data size: (27575, 11)\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "f70bee5dd12943cc870c3e10315368b0",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Casting to class labels:   0%|          | 0/28 [00:00<?, ?ba/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "4d8ff20ce7154be486f01ab12f20d79f",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Casting the dataset:   0%|          | 0/3 [00:00<?, ?ba/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "a13c970cd8964cb6a63c85eff17996c3",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Casting to class labels:   0%|          | 0/10 [00:00<?, ?ba/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "9a1504eeb7dd4af983672681da5326a3",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Casting the dataset:   0%|          | 0/1 [00:00<?, ?ba/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "8de995f944ec4226bd0b5acebb1fa90d",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/28 [00:00<?, ?ba/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "249a8cd97c5a40378cf55bf1c23cc8cc",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/10 [00:00<?, ?ba/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Num steps: 6893.75, eval steps: 3446.0\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.7/site-packages/transformers/optimization.py:309: FutureWarning: This implementation of AdamW is deprecated and will be removed in a future version. Use the PyTorch implementation torch.optim.AdamW instead, or set `no_deprecation_warning=True` to disable this warning\n",
      "  FutureWarning,\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "\n",
       "    <div>\n",
       "      \n",
       "      <progress value='27576' max='27576' style='width:300px; height:20px; vertical-align: middle;'></progress>\n",
       "      [27576/27576 10:31:56, Epoch 4/4]\n",
       "    </div>\n",
       "    <table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       " <tr style=\"text-align: left;\">\n",
       "      <th>Step</th>\n",
       "      <th>Training Loss</th>\n",
       "      <th>Validation Loss</th>\n",
       "      <th>Accuracy</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>3446</td>\n",
       "      <td>0.727600</td>\n",
       "      <td>0.765326</td>\n",
       "      <td>0.691144</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6892</td>\n",
       "      <td>0.678500</td>\n",
       "      <td>0.663233</td>\n",
       "      <td>0.727154</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>10338</td>\n",
       "      <td>0.640400</td>\n",
       "      <td>0.645199</td>\n",
       "      <td>0.758812</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>13784</td>\n",
       "      <td>0.597200</td>\n",
       "      <td>0.802463</td>\n",
       "      <td>0.750000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>17230</td>\n",
       "      <td>0.532100</td>\n",
       "      <td>0.980757</td>\n",
       "      <td>0.750326</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>20676</td>\n",
       "      <td>0.494600</td>\n",
       "      <td>0.953560</td>\n",
       "      <td>0.761749</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>24122</td>\n",
       "      <td>0.317100</td>\n",
       "      <td>1.257642</td>\n",
       "      <td>0.756201</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>27568</td>\n",
       "      <td>0.409800</td>\n",
       "      <td>1.245823</td>\n",
       "      <td>0.757289</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table><p>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "\n",
       "    <div>\n",
       "      \n",
       "      <progress value='1149' max='1149' style='width:300px; height:20px; vertical-align: middle;'></progress>\n",
       "      [1149/1149 12:24]\n",
       "    </div>\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "val_preds_df = pd.DataFrame()\n",
    "\n",
    "val_data = do_fold(0)\n",
    "\n",
    "val_preds_df = pd.concat([val_preds_df, val_data])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "eb372dbf",
   "metadata": {
    "papermill": {
     "duration": 0.088056,
     "end_time": "2022-07-23T22:21:58.407164",
     "exception": false,
     "start_time": "2022-07-23T22:21:58.319108",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## All Folds"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "4d506c26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-23T22:21:58.619317Z",
     "iopub.status.busy": "2022-07-23T22:21:58.619078Z",
     "iopub.status.idle": "2022-07-23T22:21:58.624422Z",
     "shell.execute_reply": "2022-07-23T22:21:58.623739Z"
    },
    "papermill": {
     "duration": 0.106961,
     "end_time": "2022-07-23T22:21:58.627953",
     "exception": false,
     "start_time": "2022-07-23T22:21:58.520992",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "for fold in range(1, config.n_folds-3):\n",
    "    val_data = do_fold(fold)\n",
    "    val_preds_df = pd.concat([val_preds_df, val_data])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "4078ee6c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-23T22:21:58.808409Z",
     "iopub.status.busy": "2022-07-23T22:21:58.808174Z",
     "iopub.status.idle": "2022-07-23T22:21:58.995266Z",
     "shell.execute_reply": "2022-07-23T22:21:58.994556Z"
    },
    "papermill": {
     "duration": 0.277757,
     "end_time": "2022-07-23T22:21:58.997110",
     "exception": false,
     "start_time": "2022-07-23T22:21:58.719353",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "val_preds_df.drop(columns=['inputs']).to_csv(config.output_path / 'val_preds.csv', index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "689d1ac7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-23T22:21:59.182202Z",
     "iopub.status.busy": "2022-07-23T22:21:59.181997Z",
     "iopub.status.idle": "2022-07-23T22:21:59.240411Z",
     "shell.execute_reply": "2022-07-23T22:21:59.239590Z"
    },
    "papermill": {
     "duration": 0.151392,
     "end_time": "2022-07-23T22:21:59.242238",
     "exception": false,
     "start_time": "2022-07-23T22:21:59.090846",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "val_preds_df = pd.read_csv(config.output_path / 'val_preds.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "defa7ff4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-23T22:21:59.423194Z",
     "iopub.status.busy": "2022-07-23T22:21:59.422996Z",
     "iopub.status.idle": "2022-07-23T22:21:59.438380Z",
     "shell.execute_reply": "2022-07-23T22:21:59.437459Z"
    },
    "papermill": {
     "duration": 0.108425,
     "end_time": "2022-07-23T22:21:59.442940",
     "exception": false,
     "start_time": "2022-07-23T22:21:59.334515",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>discourse_id</th>\n",
       "      <th>essay_id</th>\n",
       "      <th>discourse_text</th>\n",
       "      <th>discourse_type</th>\n",
       "      <th>discourse_effectiveness</th>\n",
       "      <th>topic</th>\n",
       "      <th>topic_name</th>\n",
       "      <th>word_count</th>\n",
       "      <th>fold</th>\n",
       "      <th>essay_fn</th>\n",
       "      <th>Adequate</th>\n",
       "      <th>Effective</th>\n",
       "      <th>Ineffective</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0013cc385424</td>\n",
       "      <td>007ACE74B050</td>\n",
       "      <td>Hi, i'm Isaac, i'm going to be writing about h...</td>\n",
       "      <td>Lead</td>\n",
       "      <td>Adequate</td>\n",
       "      <td>11</td>\n",
       "      <td>face mars landform aliens</td>\n",
       "      <td>67</td>\n",
       "      <td>0</td>\n",
       "      <td>../input/feedback-prize-effectiveness/train/00...</td>\n",
       "      <td>0.975</td>\n",
       "      <td>0.007694</td>\n",
       "      <td>0.01733</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   discourse_id      essay_id  \\\n",
       "0  0013cc385424  007ACE74B050   \n",
       "\n",
       "                                      discourse_text discourse_type  \\\n",
       "0  Hi, i'm Isaac, i'm going to be writing about h...           Lead   \n",
       "\n",
       "  discourse_effectiveness  topic                 topic_name  word_count  fold  \\\n",
       "0                Adequate     11  face mars landform aliens          67     0   \n",
       "\n",
       "                                            essay_fn  Adequate  Effective  \\\n",
       "0  ../input/feedback-prize-effectiveness/train/00...     0.975   0.007694   \n",
       "\n",
       "   Ineffective  \n",
       "0      0.01733  "
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "val_preds_df.head(1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aa9dd505",
   "metadata": {
    "papermill": {
     "duration": 0.091571,
     "end_time": "2022-07-23T22:21:59.628059",
     "exception": false,
     "start_time": "2022-07-23T22:21:59.536488",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# CV Score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "ab2d90de",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-23T22:21:59.812456Z",
     "iopub.status.busy": "2022-07-23T22:21:59.812211Z",
     "iopub.status.idle": "2022-07-23T22:21:59.862881Z",
     "shell.execute_reply": "2022-07-23T22:21:59.862200Z"
    },
    "papermill": {
     "duration": 0.145936,
     "end_time": "2022-07-23T22:21:59.864773",
     "exception": false,
     "start_time": "2022-07-23T22:21:59.718837",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.6452662150013438"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cv = log_loss(val_preds_df['discourse_effectiveness'], val_preds_df[labels])\n",
    "cv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "091bde44",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-23T22:22:00.048959Z",
     "iopub.status.busy": "2022-07-23T22:22:00.048758Z",
     "iopub.status.idle": "2022-07-23T22:22:00.056241Z",
     "shell.execute_reply": "2022-07-23T22:22:00.055486Z"
    },
    "papermill": {
     "duration": 0.100839,
     "end_time": "2022-07-23T22:22:00.058779",
     "exception": false,
     "start_time": "2022-07-23T22:21:59.957940",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "wandb.log({\"cv\": cv})"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "60920799",
   "metadata": {
    "papermill": {
     "duration": 0.100693,
     "end_time": "2022-07-23T22:22:00.298576",
     "exception": false,
     "start_time": "2022-07-23T22:22:00.197883",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Model Interpretation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2aee92f0",
   "metadata": {
    "papermill": {
     "duration": 0.089256,
     "end_time": "2022-07-23T22:22:00.476785",
     "exception": false,
     "start_time": "2022-07-23T22:22:00.387529",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "I'm going to explore some of the model's predictions. I hope to learn more about the dataset and its limitations by doing this."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6e43ddcc",
   "metadata": {
    "papermill": {
     "duration": 0.089089,
     "end_time": "2022-07-23T22:22:00.655463",
     "exception": false,
     "start_time": "2022-07-23T22:22:00.566374",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Firstly, I'll add a column to calculate the `-log` error per example."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "5a750a51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-23T22:22:00.836037Z",
     "iopub.status.busy": "2022-07-23T22:22:00.835797Z",
     "iopub.status.idle": "2022-07-23T22:22:01.033837Z",
     "shell.execute_reply": "2022-07-23T22:22:01.033102Z"
    },
    "papermill": {
     "duration": 0.290334,
     "end_time": "2022-07-23T22:22:01.035845",
     "exception": false,
     "start_time": "2022-07-23T22:22:00.745511",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def compute_loss(row):\n",
    "    return -math.log(row[row.discourse_effectiveness])\n",
    "\n",
    "val_preds_df['loss'] = val_preds_df.apply(compute_loss, axis=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7c15cf6c",
   "metadata": {
    "papermill": {
     "duration": 0.089154,
     "end_time": "2022-07-23T22:22:01.223868",
     "exception": false,
     "start_time": "2022-07-23T22:22:01.134714",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "And another boolean column to describe where the prediction was correct or not. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "a2eb5c2e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-23T22:22:01.501068Z",
     "iopub.status.busy": "2022-07-23T22:22:01.500793Z",
     "iopub.status.idle": "2022-07-23T22:22:01.527359Z",
     "shell.execute_reply": "2022-07-23T22:22:01.526672Z"
    },
    "papermill": {
     "duration": 0.215462,
     "end_time": "2022-07-23T22:22:01.529099",
     "exception": false,
     "start_time": "2022-07-23T22:22:01.313637",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "val_preds_df['predicted'] = val_preds_df[labels].idxmax(axis=1)\n",
    "val_preds_df['is_correct'] = val_preds_df.discourse_effectiveness == val_preds_df.predicted"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1bb15689",
   "metadata": {
    "papermill": {
     "duration": 0.091153,
     "end_time": "2022-07-23T22:22:01.712509",
     "exception": false,
     "start_time": "2022-07-23T22:22:01.621356",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Average error per class"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "bfbb5ab5",
   "metadata": {
    "_kg_hide-input": true,
    "execution": {
     "iopub.execute_input": "2022-07-23T22:22:01.892692Z",
     "iopub.status.busy": "2022-07-23T22:22:01.892460Z",
     "iopub.status.idle": "2022-07-23T22:22:01.908215Z",
     "shell.execute_reply": "2022-07-23T22:22:01.907447Z"
    },
    "papermill": {
     "duration": 0.108273,
     "end_time": "2022-07-23T22:22:01.910344",
     "exception": false,
     "start_time": "2022-07-23T22:22:01.802071",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>loss</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>discourse_effectiveness</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Adequate</th>\n",
       "      <td>0.347640</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Effective</th>\n",
       "      <td>0.618418</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ineffective</th>\n",
       "      <td>1.650491</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                             loss\n",
       "discourse_effectiveness          \n",
       "Adequate                 0.347640\n",
       "Effective                0.618418\n",
       "Ineffective              1.650491"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "loss_per_class = val_preds_df[['discourse_effectiveness', 'loss']].groupby('discourse_effectiveness').mean('loss')\n",
    "loss_per_class"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.12"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 38958.849621,
   "end_time": "2022-07-23T22:22:04.910620",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2022-07-23T11:32:46.060999",
   "version": "2.3.4"
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {
     "01162606924d4e86944ad52ab7fa4ae9": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "023f9a9bcf99498dbb303c68a9e6e502": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "032a9d993b394270862ec43ceebba2ba": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "05f1b78ebe3f4b01a14b5f88686181bb": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "076ef9bf3186436f8d259bec1505df54": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "VBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "VBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "VBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_5d1320717b0f4d4cb6c92cc9287e5f74",
        "IPY_MODEL_92d758cc89af44ee89ecd87b5eec89f5"
       ],
       "layout": "IPY_MODEL_032a9d993b394270862ec43ceebba2ba"
      }
     },
     "09e6aa71b92949c78888dc4cf9a3b3b3": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_05f1b78ebe3f4b01a14b5f88686181bb",
       "max": 52.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_995db7e5d84f46419d42e7edb7bfc855",
       "value": 52.0
      }
     },
     "09f7fec57b894ab597d6d05d3502fce5": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_7521602794ca4da3a9e2eb475eaa24f9",
        "IPY_MODEL_75d23b12f0cb4b7d9efc24ee25f1b683",
        "IPY_MODEL_eac26045a17d4915943cff6e29751747"
       ],
       "layout": "IPY_MODEL_885c34171a184582986d4a3272e2f641"
      }
     },
     "0e40bea88d624794a451a9d52f81d2b4": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "1277dd35670d4426bbcd85abcca8899c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "1297af3fbdab4f069cebea2c4bc9d591": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "162c06e0997040a594dcc00fa12cb5c5": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "186ba583699645bd8c86af00ef6227af": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "18d162b7159443bb92d02e7ef1be2afc": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "1f25cd98c88f45bdb2ace6592e5d2220": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "1fc6210e4ef64293a397d2d7f1883c85": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "1ffca5d3ff48412fb38790dc89bb5c60": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "22bc2a91d7d4461ca1893c6bf9ea8de8": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "23c08fc816a64d608fe27ff2ae9154b9": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "249a8cd97c5a40378cf55bf1c23cc8cc": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_79f5fbb2193743e89bacea80bb690b3c",
        "IPY_MODEL_90233c0550824bd7a98ffd3d4b3384f5",
        "IPY_MODEL_271b7c5b98a341a094758ac22be20a0c"
       ],
       "layout": "IPY_MODEL_496b0bed24fb42eca70861fddabfb8a2"
      }
     },
     "253eeaaaf19d4f84a073c5bf07679ac7": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "271b7c5b98a341a094758ac22be20a0c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_6b8746b159c04490824723c5dc46388e",
       "placeholder": "​",
       "style": "IPY_MODEL_91891fd7c7d64d27bc61b671a90e179d",
       "value": " 10/10 [00:43&lt;00:00,  3.74s/ba]"
      }
     },
     "283071330bce4711a42e9b1b4e5673b0": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "28781735bb1145fa99074b7d5fda9bdd": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_35d4b4411d9e4b6b932fb59fe7797d4b",
       "max": 3.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_1297af3fbdab4f069cebea2c4bc9d591",
       "value": 3.0
      }
     },
     "2ad06df5d8d149b3afe61e4bbb53efa4": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "2b0d1d79b6344910a0338fecf8b311f7": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_f6b7f7015ad64c5d86618bbb0f077919",
       "placeholder": "​",
       "style": "IPY_MODEL_2b3dec1ef7e240d9a772a4c5eb25a162",
       "value": " 580/580 [00:00&lt;00:00, 22.9kB/s]"
      }
     },
     "2b3dec1ef7e240d9a772a4c5eb25a162": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "2d26e87e61cc4bf89a2b875da7178ad3": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_5837c3091dc84379bf800830156e5b73",
        "IPY_MODEL_09e6aa71b92949c78888dc4cf9a3b3b3",
        "IPY_MODEL_50a41a8464524306ae5c0a6efc412d67"
       ],
       "layout": "IPY_MODEL_5ac1e783c830464f9929549ffca2de22"
      }
     },
     "2d8f67b3e5214f5ca3b9204d49893d91": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "318083d23fed40a695301d9598f3a459": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "34b686b2e82a456b8cde28cfb994ca94": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "35d4b4411d9e4b6b932fb59fe7797d4b": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "369cf51a61cd43f28bd3795551acd0cb": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "373718083d004118b2cf6d6dd537606f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "3ac470870d8e4116af65c7a13505e1c8": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_78c13a98fc91473296fc650fe29b94ff",
       "placeholder": "​",
       "style": "IPY_MODEL_c0a02641c34440ae9508f9c3b4c42f8d",
       "value": "Casting to class labels: 100%"
      }
     },
     "3e36587efd88487e82f98df4a7e480dd": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "3fd63b8662d3431fb61ba56aa163928d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "3ffac704c5a84eaf9040e45d0a524608": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "43b8d1bfc47f4aa39bb69621dcf5e87b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "44d10d408f9e48d89132857d3c357c3d": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "48a6a34d1fc24d209e9862cc45eb4bc2": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "496b0bed24fb42eca70861fddabfb8a2": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "4b8c86b22c634d9796ce613f8442f6df": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_8af64a54b3d84476a240bc3f6f52fc2f",
       "placeholder": "​",
       "style": "IPY_MODEL_773055be495443bdab33545089536b4f",
       "value": " 833M/833M [00:19&lt;00:00, 46.6MB/s]"
      }
     },
     "4d8ff20ce7154be486f01ab12f20d79f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_a0ab15a9da0a49c5a8a45939471309ce",
        "IPY_MODEL_28781735bb1145fa99074b7d5fda9bdd",
        "IPY_MODEL_a720912753b44650a018bde76ce56995"
       ],
       "layout": "IPY_MODEL_ea5aa3b0fbd440498065339b51d65e3b"
      }
     },
     "4f322e407d0c4dc09c8b0b436ee6433d": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "50a41a8464524306ae5c0a6efc412d67": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_c3fc6b9f7f4d44dc998d604638b4d8ed",
       "placeholder": "​",
       "style": "IPY_MODEL_56c8470a646c40d8816361070739beca",
       "value": " 52.0/52.0 [00:00&lt;00:00, 2.04kB/s]"
      }
     },
     "50ee24f2a5af4da4b12d04ed1a033213": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_7e9409c94777485888d3270db33a5078",
       "max": 28.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_e2270d5fd8df48c89ad4061470f54c30",
       "value": 28.0
      }
     },
     "520b37fa4b4b408db26058f36d6ca00b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "54b7e5013401431cac45aff1a8316b18": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "56546bb4169f44f6ae13b8468274e479": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_66a4f15d9a7e4a5983ad3c3659fe08f4",
       "placeholder": "​",
       "style": "IPY_MODEL_186ba583699645bd8c86af00ef6227af",
       "value": "Downloading: 100%"
      }
     },
     "56c8470a646c40d8816361070739beca": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "5837c3091dc84379bf800830156e5b73": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_864d4745db054e0f8d4aeac94902bd87",
       "placeholder": "​",
       "style": "IPY_MODEL_806cd281d9e5443dab1e94a261d62e54",
       "value": "Downloading: 100%"
      }
     },
     "5ac1e783c830464f9929549ffca2de22": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "5d1320717b0f4d4cb6c92cc9287e5f74": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "LabelModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "LabelModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "LabelView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_8f871093f4ec47f8aab1de136acb4873",
       "placeholder": "​",
       "style": "IPY_MODEL_283071330bce4711a42e9b1b4e5673b0",
       "value": ""
      }
     },
     "5ef694c74e18485b8a9a983380d13829": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "64d90490b7b346949c2bc40b62b035cf": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "65974d3bc7f94350a672d43d3092a94a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "66a4f15d9a7e4a5983ad3c3659fe08f4": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "689d7183cdba4333a08572f9df4180a8": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_318083d23fed40a695301d9598f3a459",
       "placeholder": "​",
       "style": "IPY_MODEL_3ffac704c5a84eaf9040e45d0a524608",
       "value": "100%"
      }
     },
     "6a858fd81fa048659865c71bf6dc6cc6": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "6b8746b159c04490824723c5dc46388e": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "7521602794ca4da3a9e2eb475eaa24f9": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_01162606924d4e86944ad52ab7fa4ae9",
       "placeholder": "​",
       "style": "IPY_MODEL_0e40bea88d624794a451a9d52f81d2b4",
       "value": "Downloading builder script: "
      }
     },
     "75d23b12f0cb4b7d9efc24ee25f1b683": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_fd6f9c312caf457da43108bb735cc958",
       "max": 1411.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_a7cf86f0ac934f5cbd88de7c70629960",
       "value": 1411.0
      }
     },
     "773055be495443bdab33545089536b4f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "78c13a98fc91473296fc650fe29b94ff": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "79f5fbb2193743e89bacea80bb690b3c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_a36fc38c0bda4b85adde6d9cbbd8e15d",
       "placeholder": "​",
       "style": "IPY_MODEL_a37e417b806c40b7947c54c3cef5e234",
       "value": "100%"
      }
     },
     "7dffa947c84b4c3b8daa89f437512c67": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "7e9409c94777485888d3270db33a5078": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "80468370cb1e4013a69b8b8fdda6f5df": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "806cd281d9e5443dab1e94a261d62e54": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "864d4745db054e0f8d4aeac94902bd87": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "8754916b91074ac4bf8811f651830660": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_929247711c8a4960bd89887314828883",
       "placeholder": "​",
       "style": "IPY_MODEL_f3aee21f0ec94928816e3e4e8ea59e1b",
       "value": "Casting to class labels: 100%"
      }
     },
     "87defd0c9a5449ac844b4eb7fc72c5a1": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "885c34171a184582986d4a3272e2f641": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "8a18e6c602314a4cb14e10ff2c31a8c7": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "8a982cf9c22343eabe2bb8d6bc698ce1": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "8af64a54b3d84476a240bc3f6f52fc2f": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "8de995f944ec4226bd0b5acebb1fa90d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_689d7183cdba4333a08572f9df4180a8",
        "IPY_MODEL_50ee24f2a5af4da4b12d04ed1a033213",
        "IPY_MODEL_f848cf2bbf69417a8f6dd6aa63d639d7"
       ],
       "layout": "IPY_MODEL_aa57594a02ea492da799500045670510"
      }
     },
     "8f871093f4ec47f8aab1de136acb4873": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "90233c0550824bd7a98ffd3d4b3384f5": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_cab92ed2c5044e559a546cbd630a483a",
       "max": 10.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_520b37fa4b4b408db26058f36d6ca00b",
       "value": 10.0
      }
     },
     "91891fd7c7d64d27bc61b671a90e179d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "929247711c8a4960bd89887314828883": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "92b65e06f4864240932bc1bf1ff1b505": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_9f7026e214144b078e611215669fd124",
       "max": 873673253.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_fe001f315e6d4416af59e1d11b6568b1",
       "value": 873673253.0
      }
     },
     "92d758cc89af44ee89ecd87b5eec89f5": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_44d10d408f9e48d89132857d3c357c3d",
       "max": 1.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_f1eb24974aea4b43a7792958baf5112c",
       "value": 0.0
      }
     },
     "97ca26f86e87422a9d6d00961df9158b": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "995db7e5d84f46419d42e7edb7bfc855": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "9a1504eeb7dd4af983672681da5326a3": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_af621e393c454e8bada99a92e996106b",
        "IPY_MODEL_f03844d1288a4e089014f20a5b8d6ba3",
        "IPY_MODEL_bf04f06e8d7c4656a5a5bdf94b8514c1"
       ],
       "layout": "IPY_MODEL_87defd0c9a5449ac844b4eb7fc72c5a1"
      }
     },
     "9d23fdb19afd4806b44d7c8a20f61f5d": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "9f7026e214144b078e611215669fd124": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "a0ab15a9da0a49c5a8a45939471309ce": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_1ffca5d3ff48412fb38790dc89bb5c60",
       "placeholder": "​",
       "style": "IPY_MODEL_65974d3bc7f94350a672d43d3092a94a",
       "value": "Casting the dataset: 100%"
      }
     },
     "a13c970cd8964cb6a63c85eff17996c3": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_3ac470870d8e4116af65c7a13505e1c8",
        "IPY_MODEL_f395743370fc46209274c7c2892f6155",
        "IPY_MODEL_a2a5ace07ccb47699d9c3568571a5f9c"
       ],
       "layout": "IPY_MODEL_162c06e0997040a594dcc00fa12cb5c5"
      }
     },
     "a216588cea6c41cf8b6dadcce6f1aa6b": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "a2a5ace07ccb47699d9c3568571a5f9c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_54b7e5013401431cac45aff1a8316b18",
       "placeholder": "​",
       "style": "IPY_MODEL_1f25cd98c88f45bdb2ace6592e5d2220",
       "value": " 10/10 [00:00&lt;00:00, 113.03ba/s]"
      }
     },
     "a360628b2814459fb4af17f3472ca7ad": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_5ef694c74e18485b8a9a983380d13829",
       "placeholder": "​",
       "style": "IPY_MODEL_64d90490b7b346949c2bc40b62b035cf",
       "value": "Downloading: 100%"
      }
     },
     "a36fc38c0bda4b85adde6d9cbbd8e15d": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "a37e417b806c40b7947c54c3cef5e234": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "a720912753b44650a018bde76ce56995": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_48a6a34d1fc24d209e9862cc45eb4bc2",
       "placeholder": "​",
       "style": "IPY_MODEL_8a982cf9c22343eabe2bb8d6bc698ce1",
       "value": " 3/3 [00:00&lt;00:00, 23.55ba/s]"
      }
     },
     "a7cf86f0ac934f5cbd88de7c70629960": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "aa57594a02ea492da799500045670510": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "af621e393c454e8bada99a92e996106b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_1fc6210e4ef64293a397d2d7f1883c85",
       "placeholder": "​",
       "style": "IPY_MODEL_023f9a9bcf99498dbb303c68a9e6e502",
       "value": "Casting the dataset: 100%"
      }
     },
     "b00116ef66bf4c8e84c9e2ca20c74ae1": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "b62e5f1c9bd54516987990bff10916a0": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "bb7fd836aa7b47ec9a78666f07201bc4": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_7dffa947c84b4c3b8daa89f437512c67",
       "max": 28.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_b00116ef66bf4c8e84c9e2ca20c74ae1",
       "value": 28.0
      }
     },
     "be8bdcbe3aea4336904ef106799ecb5a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "bf04f06e8d7c4656a5a5bdf94b8514c1": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_253eeaaaf19d4f84a073c5bf07679ac7",
       "placeholder": "​",
       "style": "IPY_MODEL_6a858fd81fa048659865c71bf6dc6cc6",
       "value": " 1/1 [00:00&lt;00:00, 17.04ba/s]"
      }
     },
     "bf60585dfcd34539a78ecb2e856359c1": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_3e36587efd88487e82f98df4a7e480dd",
       "max": 580.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_23c08fc816a64d608fe27ff2ae9154b9",
       "value": 580.0
      }
     },
     "c0a02641c34440ae9508f9c3b4c42f8d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "c3fc6b9f7f4d44dc998d604638b4d8ed": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "c8330395c762495eaafbb54c55144244": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_56546bb4169f44f6ae13b8468274e479",
        "IPY_MODEL_92b65e06f4864240932bc1bf1ff1b505",
        "IPY_MODEL_4b8c86b22c634d9796ce613f8442f6df"
       ],
       "layout": "IPY_MODEL_22bc2a91d7d4461ca1893c6bf9ea8de8"
      }
     },
     "cab92ed2c5044e559a546cbd630a483a": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "ce2024f712c146b8b44b0730d838d3d6": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "ce455c5e845e4f598832e2eb724dde80": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_4f322e407d0c4dc09c8b0b436ee6433d",
       "placeholder": "​",
       "style": "IPY_MODEL_be8bdcbe3aea4336904ef106799ecb5a",
       "value": "Downloading: 100%"
      }
     },
     "d21cfd5229c04a9d81a0120fe5f98949": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_a360628b2814459fb4af17f3472ca7ad",
        "IPY_MODEL_bf60585dfcd34539a78ecb2e856359c1",
        "IPY_MODEL_2b0d1d79b6344910a0338fecf8b311f7"
       ],
       "layout": "IPY_MODEL_97ca26f86e87422a9d6d00961df9158b"
      }
     },
     "d303b9a2b5724b4e8dba487b3e252704": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_da82662f6b5d4e879549ae7bb694a34b",
       "placeholder": "​",
       "style": "IPY_MODEL_2d8f67b3e5214f5ca3b9204d49893d91",
       "value": " 2.35M/2.35M [00:00&lt;00:00, 24.5MB/s]"
      }
     },
     "da82662f6b5d4e879549ae7bb694a34b": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "e0aa4f11617447ac86887c940cd3977e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_369cf51a61cd43f28bd3795551acd0cb",
       "placeholder": "​",
       "style": "IPY_MODEL_373718083d004118b2cf6d6dd537606f",
       "value": " 28/28 [00:00&lt;00:00, 124.03ba/s]"
      }
     },
     "e2270d5fd8df48c89ad4061470f54c30": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "ea5aa3b0fbd440498065339b51d65e3b": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "eac26045a17d4915943cff6e29751747": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_b62e5f1c9bd54516987990bff10916a0",
       "placeholder": "​",
       "style": "IPY_MODEL_3fd63b8662d3431fb61ba56aa163928d",
       "value": " 3.19k/? [00:00&lt;00:00, 123kB/s]"
      }
     },
     "f03844d1288a4e089014f20a5b8d6ba3": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_18d162b7159443bb92d02e7ef1be2afc",
       "max": 1.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_1277dd35670d4426bbcd85abcca8899c",
       "value": 1.0
      }
     },
     "f1eb24974aea4b43a7792958baf5112c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "f1fa14e4c48d46409cfad60b981b5f7d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_34b686b2e82a456b8cde28cfb994ca94",
       "max": 2464616.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_ce2024f712c146b8b44b0730d838d3d6",
       "value": 2464616.0
      }
     },
     "f395743370fc46209274c7c2892f6155": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_80468370cb1e4013a69b8b8fdda6f5df",
       "max": 10.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_43b8d1bfc47f4aa39bb69621dcf5e87b",
       "value": 10.0
      }
     },
     "f3aee21f0ec94928816e3e4e8ea59e1b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "f6b7f7015ad64c5d86618bbb0f077919": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "f70bee5dd12943cc870c3e10315368b0": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_8754916b91074ac4bf8811f651830660",
        "IPY_MODEL_bb7fd836aa7b47ec9a78666f07201bc4",
        "IPY_MODEL_e0aa4f11617447ac86887c940cd3977e"
       ],
       "layout": "IPY_MODEL_a216588cea6c41cf8b6dadcce6f1aa6b"
      }
     },
     "f848cf2bbf69417a8f6dd6aa63d639d7": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_8a18e6c602314a4cb14e10ff2c31a8c7",
       "placeholder": "​",
       "style": "IPY_MODEL_2ad06df5d8d149b3afe61e4bbb53efa4",
       "value": " 28/28 [02:31&lt;00:00,  4.24s/ba]"
      }
     },
     "fd6f9c312caf457da43108bb735cc958": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "fe001f315e6d4416af59e1d11b6568b1": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "fea7bc15757449f29e7babb99959ceb2": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_ce455c5e845e4f598832e2eb724dde80",
        "IPY_MODEL_f1fa14e4c48d46409cfad60b981b5f7d",
        "IPY_MODEL_d303b9a2b5724b4e8dba487b3e252704"
       ],
       "layout": "IPY_MODEL_9d23fdb19afd4806b44d7c8a20f61f5d"
      }
     }
    },
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
